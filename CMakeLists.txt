CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
PROJECT(RedisAI)

IF (NOT DEPS_PATH)
    # dependencies are required!
    MESSAGE(FATAL_ERROR "DEPS PATH Missing!")
ENDIF()

GET_FILENAME_COMPONENT(depsAbs
    "${DEPS_PATH}" REALPATH
    BASE_DIR "${CMAKE_BINARY_DIR}")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")

INCLUDE_DIRECTORIES(${depsAbs}/dlpack/include)

LIST(APPEND CMAKE_PREFIX_PATH "${depsAbs}/libtorch")
LIST(APPEND CMAKE_PREFIX_PATH "${depsAbs}/libtensorflow")
LIST(APPEND CMAKE_PREFIX_PATH "${depsAbs}/mkl")

FIND_LIBRARY(TF_LIBRARIES NAMES tensorflow libtensorflow.so)

IF (NOT TF_LIBRARIES)
    MESSAGE(FATAL_ERROR "Could not find tensorflow")
ENDIF()

INCLUDE_DIRECTORIES(${depsAbs}/libtensorflow/include)

IF (APPLE)
    FIND_LIBRARY(MKL_LIBRARIES NAMES mklml)
    IF (NOT MKL_LIBRARIES)
        MESSAGE(FATAL_ERROR "Could not find MKL for Mac")
    ENDIF()
    SET(platDeps "${MKL_LIBRARIES}")
ENDIF()

# Find Torch stuff and build our wrapper
FIND_PACKAGE(Torch REQUIRED)
INCLUDE_DIRECTORIES(util/libtorch_c)
ADD_DEFINITIONS(-DREDISMODULE_EXPERIMENTAL_API)

ADD_SUBDIRECTORY(util/libtorch_c)
ADD_SUBDIRECTORY(src)
ADD_LIBRARY(redisai SHARED $<TARGET_OBJECTS:redisai_obj>)
TARGET_LINK_LIBRARIES(redisai torch_c ${TF_LIBRARIES} ${platDeps})

SET_TARGET_PROPERTIES(redisai PROPERTIES PREFIX "")
SET_TARGET_PROPERTIES(redisai PROPERTIES SUFFIX ".so")

IF (APPLE)
    SET_TARGET_PROPERTIES(redisai PROPERTIES
        LINK_FLAGS "-undefined dynamic_lookup")
ENDIF()