version: 2.1

commands:
  ci_steps:
    parameters:
      platform:
        type: string
    steps:
      - checkout
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "get_deps.sh" }}
#          # fallback to using the latest cache if no exact match is found
#          # - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            ./opt/readies/bin/getpy3
            BREW_NO_UPDATE=1 ./opt/system-setup.py
            # git clone git://github.com/antirez/redis.git --branch 5.0.7; (cd redis; make malloc=libc -j $(nproc); make install); redis-server --version
            ./get_deps.sh cpu
      - save_cache:
          paths:
            - deps
            - /usr/local
          key: build-dependencies-{{ checksum "get_deps.sh" }}
      - run:
          name: Set up workspace
          command: |
            mkdir -p ~/workspace
            chown `whoami` ~/workspace
      - run:
          name: Build
          command: make -C opt all SHOW=1
      - run:
          name: Test
          command: |
            mkdir -p ~/workspace/tests
            make -C opt test SHOW=1
      - run:
          name: Package
          command: make -C opt pack BRANCH="${CIRCLE_BRANCH//[^A-Za-z0-9._-]/_}" INTO=~/workspace/packages SHOW=1
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - 'packages/release/*.zip'
            - 'packages/release/*.tgz'
            - 'packages/branch/*.zip'
            - 'packages/branch/*.tgz'
      - store_artifacts:
          path: test/logs
          
  deploy:
    parameters:
      from:
        type: string
    steps:
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp <<parameters.from>>/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip" --include "*.tgz"

jobs:
  build:
    docker:
      - image: redisfab/rmbuilder:5.0.7-x64-buster
    steps:
      - ci_steps:
          platform: debian

  coverage:
    docker:
      - image: redisfab/rmbuilder:5.0.7-x64-buster
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            ./opt/readies/bin/getpy3
            ./opt/system-setup.py
            # git clone git://github.com/antirez/redis.git --branch 5.0.7; cd redis; make malloc=libc -j $(nproc); make install; redis-server --version
      - restore_cache:
          keys:
          - build-dependencies-{{ checksum "get_deps.sh" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Build
          command: |
            # make fetch SHOW=1
            make -C opt build COV=1 SHOW=1
      - run:
          name: Test with coverage
          command: |
            make -C opt test SHOW=1 COV=1
            make -C opt cov-upload

  build-macos:
    macos:
      xcode: 11.1.0
    steps:
      - run:
          name: Fix macOS Python installation
          command: |
            brew reinstall -f python2
      - ci_steps:
          platform: macosx

  build-multiarch-docker:
    machine:
      enabled: true
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Checkout LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install -y git-lfs
            git lfs install
            git lfs pull
      - run:
          name: Setup Docker client experimental features
          command: |
            sudo ./opt/readies/bin/getdocker --just-enable-exp
            docker version
      - run:
          name: Build
          command: |
            sudo docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            make -C opt/build/docker build
            sudo make -C opt/build/docker publish

  build-gpu:
    machine:
      enabled: true
      docker_layer_caching: true
      resource_class: gpu.nvidia.small
      image: ubuntu-1604-cuda-10.1:201909-23
    steps:
      - checkout
      - run:
          name: Build
          command: |
            docker build -f Dockerfile.gpu-test -t redisai-gpu:latest-x64-bionic-test .
      - run:
          name: Test
          command: |
            mkdir -p ~/workspace/tests
            docker run --gpus all -v $HOME/workspace/tests:/build/test/logs -it --rm redisai-gpu:latest-x64-bionic-test
          no_output_timeout: 30m
      - store_artifacts:
          path: ~/workspace/tests

  deploy_package:
    parameters:
      package:
        type: string
    docker:
      - image: redisfab/rmbuilder:5.0.7-x64-buster
    steps:
      - attach_workspace:
          at: ~/workspace
      - deploy:
          from: ~/workspace/packages/<<parameters.package>>
      - store_artifacts:
          path: ~/workspace/packages/<<parameters.package>>

  deploy_docs:
    docker:
      - image: redisfab/rmbuilder:5.0.7-x64-buster
    steps:
      - checkout
      - run:
          name: Build Docs
          command: python3 -m mkdocs build
      - run:
          name: Deploy Docs to S3
          command: |
            aws s3 cp site s3://oss.redislabs.com/$WEBSITE_FOLDER/ --acl public-read --recursive

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - coverage:
          requires:
            - build
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/ 
      # - build-macos:
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^v[0-9].*/
      #- build-multiarch-docker:
      #    filters:
      #      tags:
      #        only: /^v[0-9].*/ 
      #      branches:
      #        ignore: /.*/
      - build-gpu:
          filters:
            tags:
              only: /.*/
      - deploy_package:
          name: deploy_branch
          package: branch
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_package:
          name: deploy_release
          package: release
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: '/^v[0-9].*/'
      - deploy_docs:
          filters:
            branches:
              only: master

  #nightly:
  #  triggers:
  #   - schedule:
  #        cron: "20 17 * * *"
  #        filters:
  #           branches:
  #             only:
  #              - master
  #  jobs:
  #    - build-macos
