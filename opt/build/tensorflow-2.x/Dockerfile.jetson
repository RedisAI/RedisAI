
ARG OS=ubuntu18.04
ARG TF_VERSION=2.3.1
ARG CUDA_VER=10.2
ARG CUDNN_VERSION=8
ARG TENSORRT_VERSION=7.2
ARG MACH=aarch64

#----------------------------------------------------------------------------------------------
FROM redisfab/jetpack:4.4.1-arm64v8-l4t

ARG TF_VERSION
ARG CUDA_VERSION
ARG CUDNN_VERSION
ARG TENSORRT_VERSION

RUN if [ ! -z $(command -v apt-get) ]; then apt-get -qq update; apt-get -q install -y git python3-h5py; fi
RUN if [ ! -z $(command -v yum) ]; then yum install -y git; fi

WORKDIR /build

#----------------------------------------------------------------------------------------------

RUN git clone https://github.com/RedisLabsModules/readies.git
RUN PIP=1 ./readies/bin/getpy3
RUN ./readies/bin/getbazel

#----------------------------------------------------------------------------------------------

ENV LANG=C.UTF-8

RUN ln -s $(command -v python3) /usr/local/bin/python
RUN python3 -m pip --no-cache-dir install virtualenv Pillow h5py keras_preprocessing matplotlib \
        mock 'numpy<1.19.0' future enum34

#----------------------------------------------------------------------------------------------

RUN git clone --recursive https://github.com/tensorflow/tensorflow.git

WORKDIR /build/tensorflow/
RUN git checkout v${TF_VERSION}

#----------------------------------------------------------------------------------------------

ENV TF_NEED_CUDA=1 \
    TF_CUDA_COMPUTE_CAPABILITIES=6.1,5.3,3.5,7.2 \
    TF_NEED_TENSORRT=0 \
    \
    TF_NEED_GCP=0 \
    TF_NEED_HDFS=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_JEMALLOC=1 \
    TF_ENABLE_XLA=0 \
    TF_NEED_VERBS=0 \
    TF_CUDA_CLANG=0 \
    TF_NEED_MKL=0 \
    TF_DOWNLOAD_MKL=0 \
    TF_NEED_AWS=0 \
    TF_NEED_MPI=0 \
    TF_NEED_GDR=0 \
    TF_NEED_S3=0 \
    TF_NEED_OPENCL_SYCL=0 \
    TF_SET_ANDROID_WORKSPACE=0 \
    TF_NEED_COMPUTECPP=0 \
    TF_NEED_KAFKA=0 \

ENV TF_CUDA_VERSION=${CUDA_VER} \
    TF_CUDNN_VERSION=${CUDNN_VERSION} \
    TF_CUBLAS_VERSION=${TF_CUDA_VERSION} \
    TF_TENSORRT_VERSION=${TENSORRT_VERSION} \
    \
    CUDA_TOOLKIT_PATH="/usr/local/cuda-${TF_CUDA_VERSION}" \
    TF_CUDA_PATHS="/usr/include,/usr/include/cuda,/opt/cuda/include,/usr/local/cuda-${TF_CUDA_VERSION}/include,/usr/local/cuda-${TF_CUDA_VERSION}/lib64,/usr/local/cuda-${TF_CUDA_VERSION}/targets/${MACH}-linux/,/usr/local/cuda-${TF_CUDA_VERSION}/targets/${MACH}-linux/lib/,/usr/lib/${MACH}-linux-gnu,/usr/local/lib,/usr/local/cuda-${TF_CUDA_VERSION},"
    \
    CUDNN_INSTALL_PATH=/usr/lib/${MACH}-linux-gnu \
    TENSORRT_INSTALL_PATH=/usr/lib/${MACH}-linux-gnu
    \
    PATH="/usr/local/cuda-${TF_CUDA_VERSION}/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda-${TF_CUDA_VERSION}/lib64:/usr/lib/${MACH}-linux-gnu:${LD_LIBRARY_PATH}"

RUN yes "" | ./configure
RUN set -e ;\
    . /etc/profile.d/golang.sh ;\
    bazel build --jobs `/build/readies/bin/nproc` \
        --action_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
        --config=v2 \
        --config=noaws \
        --config=nogcp \
        --config=nonccl \
        --config=nohdfs \
        --config=opt \
        --config=cuda \
        //tensorflow:libtensorflow.so

#----------------------------------------------------------------------------------------------

WORKDIR /build
ADD collect.py /build/
RUN python ./collect.py --version ${TF_VERSION} --variant gpu-jetson
